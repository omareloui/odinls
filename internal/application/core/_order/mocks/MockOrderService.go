// Code generated by mockery. DO NOT EDIT.

package order_mock

import (
	jwtadapter "github.com/omareloui/odinls/internal/adapters/jwt"
	mock "github.com/stretchr/testify/mock"

	order "github.com/omareloui/odinls/internal/application/core/order"
)

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: claims, ord, opts
func (_m *MockOrderService) CreateOrder(claims *jwtadapter.JwtAccessClaims, ord *order.Order, opts ...order.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, ord)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, *order.Order, ...order.RetrieveOptsFunc) error); ok {
		r0 = rf(claims, ord, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: claims, id, opts
func (_m *MockOrderService) GetOrderByID(claims *jwtadapter.JwtAccessClaims, id string, opts ...order.RetrieveOptsFunc) (*order.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, ...order.RetrieveOptsFunc) (*order.Order, error)); ok {
		return rf(claims, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, ...order.RetrieveOptsFunc) *order.Order); ok {
		r0 = rf(claims, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, string, ...order.RetrieveOptsFunc) error); ok {
		r1 = rf(claims, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: claims, opts
func (_m *MockOrderService) GetOrders(claims *jwtadapter.JwtAccessClaims, opts ...order.RetrieveOptsFunc) ([]order.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...order.RetrieveOptsFunc) ([]order.Order, error)); ok {
		return rf(claims, opts...)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...order.RetrieveOptsFunc) []order.Order); ok {
		r0 = rf(claims, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, ...order.RetrieveOptsFunc) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderByID provides a mock function with given fields: claims, id, ord, opts
func (_m *MockOrderService) UpdateOrderByID(claims *jwtadapter.JwtAccessClaims, id string, ord *order.Order, opts ...order.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, id, ord)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, *order.Order, ...order.RetrieveOptsFunc) error); ok {
		r0 = rf(claims, id, ord, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
