// Code generated by mockery. DO NOT EDIT.

package client_mock

import (
	client "github.com/omareloui/odinls/internal/application/core/client"
	mock "github.com/stretchr/testify/mock"
)

// MockClientRepository is an autogenerated mock type for the ClientRepository type
type MockClientRepository struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: _a0, opts
func (_m *MockClientRepository) CreateClient(_a0 *client.Client, opts ...client.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Client, ...client.RetrieveOptsFunc) error); ok {
		r0 = rf(_a0, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientByID provides a mock function with given fields: id, opts
func (_m *MockClientRepository) GetClientByID(id string, opts ...client.RetrieveOptsFunc) (*client.Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByID")
	}

	var r0 *client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...client.RetrieveOptsFunc) (*client.Client, error)); ok {
		return rf(id, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...client.RetrieveOptsFunc) *client.Client); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...client.RetrieveOptsFunc) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClients provides a mock function with given fields: opts
func (_m *MockClientRepository) GetClients(opts ...client.RetrieveOptsFunc) ([]client.Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClients")
	}

	var r0 []client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(...client.RetrieveOptsFunc) ([]client.Client, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...client.RetrieveOptsFunc) []client.Client); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(...client.RetrieveOptsFunc) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientsByMerchantID provides a mock function with given fields: merchantId, opts
func (_m *MockClientRepository) GetClientsByMerchantID(merchantId string, opts ...client.RetrieveOptsFunc) ([]client.Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, merchantId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClientsByMerchantID")
	}

	var r0 []client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...client.RetrieveOptsFunc) ([]client.Client, error)); ok {
		return rf(merchantId, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...client.RetrieveOptsFunc) []client.Client); ok {
		r0 = rf(merchantId, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...client.RetrieveOptsFunc) error); ok {
		r1 = rf(merchantId, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClientByID provides a mock function with given fields: id, _a1, opts
func (_m *MockClientRepository) UpdateClientByID(id string, _a1 *client.Client, opts ...client.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *client.Client, ...client.RetrieveOptsFunc) error); ok {
		r0 = rf(id, _a1, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockClientRepository creates a new instance of MockClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRepository {
	mock := &MockClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
