// Code generated by mockery. DO NOT EDIT.

package counter_mock

import (
	counter "github.com/omareloui/odinls/internal/application/core/counter"
	mock "github.com/stretchr/testify/mock"
)

// MockCounterRepository is an autogenerated mock type for the CounterRepository type
type MockCounterRepository struct {
	mock.Mock
}

// AddOneToOrder provides a mock function with no fields
func (_m *MockCounterRepository) AddOneToOrder() (uint, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddOneToOrder")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOneToProduct provides a mock function with given fields: category
func (_m *MockCounterRepository) AddOneToProduct(category string) (uint8, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for AddOneToProduct")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint8, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) uint8); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCounter provides a mock function with given fields: _a0
func (_m *MockCounterRepository) CreateCounter(_a0 *counter.Counter) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*counter.Counter) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCounter provides a mock function with no fields
func (_m *MockCounterRepository) GetCounter() (*counter.Counter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCounter")
	}

	var r0 *counter.Counter
	var r1 error
	if rf, ok := ret.Get(0).(func() (*counter.Counter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *counter.Counter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*counter.Counter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCounterRepository creates a new instance of MockCounterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounterRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounterRepository {
	mock := &MockCounterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
