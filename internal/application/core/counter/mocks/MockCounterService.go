// Code generated by mockery. DO NOT EDIT.

package counter_mock

import (
	jwtadapter "github.com/omareloui/odinls/internal/adapters/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockCounterService is an autogenerated mock type for the CounterService type
type MockCounterService struct {
	mock.Mock
}

// AddOneToOrder provides a mock function with given fields: claims
func (_m *MockCounterService) AddOneToOrder(claims *jwtadapter.JwtAccessClaims) (uint, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for AddOneToOrder")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims) (uint, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims) uint); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOneToProduct provides a mock function with given fields: claims, category
func (_m *MockCounterService) AddOneToProduct(claims *jwtadapter.JwtAccessClaims, category string) (uint8, error) {
	ret := _m.Called(claims, category)

	if len(ret) == 0 {
		panic("no return value specified for AddOneToProduct")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string) (uint8, error)); ok {
		return rf(claims, category)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string) uint8); ok {
		r0 = rf(claims, category)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, string) error); ok {
		r1 = rf(claims, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCounterService creates a new instance of MockCounterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounterService {
	mock := &MockCounterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
