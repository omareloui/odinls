// Code generated by mockery. DO NOT EDIT.

package material_mock

import (
	material "github.com/omareloui/odinls/internal/application/core/material"
	mock "github.com/stretchr/testify/mock"
)

// MockMaterialRepository is an autogenerated mock type for the MaterialRepository type
type MockMaterialRepository struct {
	mock.Mock
}

// CreateMaterial provides a mock function with given fields: mat, opts
func (_m *MockMaterialRepository) CreateMaterial(mat *material.Material, opts ...material.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, mat)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMaterial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*material.Material, ...material.RetrieveOptsFunc) error); ok {
		r0 = rf(mat, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMaterialByID provides a mock function with given fields: id, opts
func (_m *MockMaterialRepository) GetMaterialByID(id string, opts ...material.RetrieveOptsFunc) (*material.Material, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMaterialByID")
	}

	var r0 *material.Material
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...material.RetrieveOptsFunc) (*material.Material, error)); ok {
		return rf(id, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...material.RetrieveOptsFunc) *material.Material); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*material.Material)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...material.RetrieveOptsFunc) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaterials provides a mock function with given fields: opts
func (_m *MockMaterialRepository) GetMaterials(opts ...material.RetrieveOptsFunc) ([]material.Material, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMaterials")
	}

	var r0 []material.Material
	var r1 error
	if rf, ok := ret.Get(0).(func(...material.RetrieveOptsFunc) ([]material.Material, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...material.RetrieveOptsFunc) []material.Material); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]material.Material)
		}
	}

	if rf, ok := ret.Get(1).(func(...material.RetrieveOptsFunc) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMaterialByID provides a mock function with given fields: id, mat, opts
func (_m *MockMaterialRepository) UpdateMaterialByID(id string, mat *material.Material, opts ...material.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, mat)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaterialByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *material.Material, ...material.RetrieveOptsFunc) error); ok {
		r0 = rf(id, mat, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMaterialRepository creates a new instance of MockMaterialRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaterialRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaterialRepository {
	mock := &MockMaterialRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
