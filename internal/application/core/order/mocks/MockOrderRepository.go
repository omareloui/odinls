// Code generated by mockery. DO NOT EDIT.

package order_mock

import (
	order "github.com/omareloui/odinls/internal/application/core/order"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ord, opts
func (_m *MockOrderRepository) CreateOrder(ord *order.Order, opts ...order.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ord)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*order.Order, ...order.RetrieveOptsFunc) error); ok {
		r0 = rf(ord, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: id, opts
func (_m *MockOrderRepository) GetOrderByID(id string, opts ...order.RetrieveOptsFunc) (*order.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...order.RetrieveOptsFunc) (*order.Order, error)); ok {
		return rf(id, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...order.RetrieveOptsFunc) *order.Order); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...order.RetrieveOptsFunc) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: opts
func (_m *MockOrderRepository) GetOrders(opts ...order.RetrieveOptsFunc) ([]order.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(...order.RetrieveOptsFunc) ([]order.Order, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...order.RetrieveOptsFunc) []order.Order); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(...order.RetrieveOptsFunc) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderByID provides a mock function with given fields: id, ord, opts
func (_m *MockOrderRepository) UpdateOrderByID(id string, ord *order.Order, opts ...order.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, ord)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *order.Order, ...order.RetrieveOptsFunc) error); ok {
		r0 = rf(id, ord, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
