// Code generated by mockery. DO NOT EDIT.

package product_test

import (
	jwtadapter "github.com/omareloui/odinls/internal/adapters/jwt"
	mock "github.com/stretchr/testify/mock"

	product "github.com/omareloui/odinls/internal/application/core/product"
)

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: claims, prod, opts
func (_m *MockProductService) CreateProduct(claims *jwtadapter.JwtAccessClaims, prod *product.Product, opts ...product.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, prod)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, *product.Product, ...product.RetrieveOptsFunc) error); ok {
		r0 = rf(claims, prod, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentMerchantProducts provides a mock function with given fields: claims, opts
func (_m *MockProductService) GetCurrentMerchantProducts(claims *jwtadapter.JwtAccessClaims, opts ...product.RetrieveOptsFunc) ([]product.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentMerchantProducts")
	}

	var r0 []product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) ([]product.Product, error)); ok {
		return rf(claims, opts...)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) []product.Product); ok {
		r0 = rf(claims, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: claims, id, opts
func (_m *MockProductService) GetProductByID(claims *jwtadapter.JwtAccessClaims, id string, opts ...product.RetrieveOptsFunc) (*product.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, ...product.RetrieveOptsFunc) (*product.Product, error)); ok {
		return rf(claims, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, ...product.RetrieveOptsFunc) *product.Product); ok {
		r0 = rf(claims, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, string, ...product.RetrieveOptsFunc) error); ok {
		r1 = rf(claims, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: claims, opts
func (_m *MockProductService) GetProducts(claims *jwtadapter.JwtAccessClaims, opts ...product.RetrieveOptsFunc) ([]product.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) ([]product.Product, error)); ok {
		return rf(claims, opts...)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) []product.Product); ok {
		r0 = rf(claims, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, ...product.RetrieveOptsFunc) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductByID provides a mock function with given fields: claims, id, prod, opts
func (_m *MockProductService) UpdateProductByID(claims *jwtadapter.JwtAccessClaims, id string, prod *product.Product, opts ...product.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, id, prod)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, *product.Product, ...product.RetrieveOptsFunc) error); ok {
		r0 = rf(claims, id, prod, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
