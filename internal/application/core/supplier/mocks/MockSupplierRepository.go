// Code generated by mockery. DO NOT EDIT.

package supplier_mock

import (
	supplier "github.com/omareloui/odinls/internal/application/core/supplier"
	mock "github.com/stretchr/testify/mock"
)

// MockSupplierRepository is an autogenerated mock type for the SupplierRepository type
type MockSupplierRepository struct {
	mock.Mock
}

// CreateSupplier provides a mock function with given fields: _a0
func (_m *MockSupplierRepository) CreateSupplier(_a0 *supplier.Supplier) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSupplier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*supplier.Supplier) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSupplierByID provides a mock function with given fields: id
func (_m *MockSupplierRepository) GetSupplierByID(id string) (*supplier.Supplier, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSupplierByID")
	}

	var r0 *supplier.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*supplier.Supplier, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *supplier.Supplier); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supplier.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppliers provides a mock function with no fields
func (_m *MockSupplierRepository) GetSuppliers() ([]supplier.Supplier, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSuppliers")
	}

	var r0 []supplier.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]supplier.Supplier, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []supplier.Supplier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]supplier.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSupplierByID provides a mock function with given fields: id, _a1
func (_m *MockSupplierRepository) UpdateSupplierByID(id string, _a1 *supplier.Supplier) error {
	ret := _m.Called(id, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSupplierByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *supplier.Supplier) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSupplierRepository creates a new instance of MockSupplierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSupplierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSupplierRepository {
	mock := &MockSupplierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
