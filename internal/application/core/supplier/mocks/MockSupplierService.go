// Code generated by mockery. DO NOT EDIT.

package supplier_mock

import (
	jwtadapter "github.com/omareloui/odinls/internal/adapters/jwt"
	mock "github.com/stretchr/testify/mock"

	supplier "github.com/omareloui/odinls/internal/application/core/supplier"
)

// MockSupplierService is an autogenerated mock type for the SupplierService type
type MockSupplierService struct {
	mock.Mock
}

// CreateSupplier provides a mock function with given fields: claims, _a1
func (_m *MockSupplierService) CreateSupplier(claims *jwtadapter.JwtAccessClaims, _a1 *supplier.Supplier) error {
	ret := _m.Called(claims, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSupplier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, *supplier.Supplier) error); ok {
		r0 = rf(claims, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSupplierByID provides a mock function with given fields: claims, id
func (_m *MockSupplierService) GetSupplierByID(claims *jwtadapter.JwtAccessClaims, id string) (*supplier.Supplier, error) {
	ret := _m.Called(claims, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSupplierByID")
	}

	var r0 *supplier.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string) (*supplier.Supplier, error)); ok {
		return rf(claims, id)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string) *supplier.Supplier); ok {
		r0 = rf(claims, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supplier.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims, string) error); ok {
		r1 = rf(claims, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppliers provides a mock function with given fields: claims
func (_m *MockSupplierService) GetSuppliers(claims *jwtadapter.JwtAccessClaims) ([]supplier.Supplier, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GetSuppliers")
	}

	var r0 []supplier.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims) ([]supplier.Supplier, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims) []supplier.Supplier); ok {
		r0 = rf(claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]supplier.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwtadapter.JwtAccessClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSupplierByID provides a mock function with given fields: claims, id, _a2
func (_m *MockSupplierService) UpdateSupplierByID(claims *jwtadapter.JwtAccessClaims, id string, _a2 *supplier.Supplier) error {
	ret := _m.Called(claims, id, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSupplierByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwtadapter.JwtAccessClaims, string, *supplier.Supplier) error); ok {
		r0 = rf(claims, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSupplierService creates a new instance of MockSupplierService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSupplierService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSupplierService {
	mock := &MockSupplierService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
