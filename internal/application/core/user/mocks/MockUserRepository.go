// Code generated by mockery. DO NOT EDIT.

package user_mock

import (
	user "github.com/omareloui/odinls/internal/application/core/user"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, opts
func (_m *MockUserRepository) CreateUser(_a0 *user.User, opts ...user.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.User, ...user.RetrieveOptsFunc) error); ok {
		r0 = rf(_a0, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: id, opts
func (_m *MockUserRepository) FindUser(id string, opts ...user.RetrieveOptsFunc) (*user.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...user.RetrieveOptsFunc) (*user.User, error)); ok {
		return rf(id, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...user.RetrieveOptsFunc) *user.User); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...user.RetrieveOptsFunc) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmailOrUsername provides a mock function with given fields: emailOrUsername, opts
func (_m *MockUserRepository) FindUserByEmailOrUsername(emailOrUsername string, opts ...user.RetrieveOptsFunc) (*user.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, emailOrUsername)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmailOrUsername")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...user.RetrieveOptsFunc) (*user.User, error)); ok {
		return rf(emailOrUsername, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...user.RetrieveOptsFunc) *user.User); ok {
		r0 = rf(emailOrUsername, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...user.RetrieveOptsFunc) error); ok {
		r1 = rf(emailOrUsername, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmailOrUsernameFromUser provides a mock function with given fields: usr, opts
func (_m *MockUserRepository) FindUserByEmailOrUsernameFromUser(usr *user.User, opts ...user.RetrieveOptsFunc) (*user.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, usr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmailOrUsernameFromUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User, ...user.RetrieveOptsFunc) (*user.User, error)); ok {
		return rf(usr, opts...)
	}
	if rf, ok := ret.Get(0).(func(*user.User, ...user.RetrieveOptsFunc) *user.User); ok {
		r0 = rf(usr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User, ...user.RetrieveOptsFunc) error); ok {
		r1 = rf(usr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: opts
func (_m *MockUserRepository) GetUsers(opts ...user.RetrieveOptsFunc) ([]user.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(...user.RetrieveOptsFunc) ([]user.User, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...user.RetrieveOptsFunc) []user.User); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(...user.RetrieveOptsFunc) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetCraftsmanByID provides a mock function with given fields: id
func (_m *MockUserRepository) UnsetCraftsmanByID(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UnsetCraftsmanByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByID provides a mock function with given fields: id, _a1, opts
func (_m *MockUserRepository) UpdateUserByID(id string, _a1 *user.User, opts ...user.RetrieveOptsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *user.User, ...user.RetrieveOptsFunc) error); ok {
		r0 = rf(id, _a1, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
