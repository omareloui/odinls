package views

import (
	"fmt"
	"time"

	"github.com/omareloui/odinls/internal/adapters/jwt"
	"github.com/omareloui/odinls/internal/application/core/client"
)

type ClientFormData struct {
	Name               FormInputData
	Notes              FormInputData
	WholesaleAsDefault FormInputData
	Phone              FormInputData
	Link               FormInputData
	Email              FormInputData
	Location           FormInputData
}

templ ClientsPage(access *jwtadapter.JwtAccessClaims, clients []client.Client, formdata *ClientFormData) {
	@baseLayout(access, "Clients | Odin LS") {
		@container() {
			@CreateClientForm(formdata, true)
			<h2 class="text-3xl font-bold mb-3">Clients</h2>
			@ClientsList(clients)
		}
	}
}

templ CreateClientForm(formdata *ClientFormData, close ...bool) {
	@creationForm("Create Client", "/clients", "Create Client", close...) {
		@clientFormBody(&client.Client{}, formdata)
	}
}

templ ClientsList(clients []client.Client) {
	<div id="clientsList" class="grid no-entries">
		for i, m := range clients {
			if i > 0 {
				<br/>
			}
			@Client(&m)
		}
	</div>
}

templ Client(client *client.Client) {
	<div hx-target="this" class="entry-container">
		<p>ID: { client.ID }</p>
		<p>Name: { client.Name }</p>
		<p>MerchantID: { client.MerchantID }</p>
		if client.WholesaleAsDefault {
			<p>Sell as Wholesale by Default: <span class="font-bold">YES</span></p>
		} else {
			<p>Sell as Wholesale by Default: no</p>
		}
		if client.Notes != "" {
			<p><span class="font-bold">Notes:</span> { client.Notes }</p>
		}
		<p>Created At: { client.CreatedAt.Format(time.RFC1123) }</p>
		<p>Updated At: { client.UpdatedAt.Format(time.RFC1123) }</p>
		if client.HasContactInfo() {
			<h3 class="text-lg font-bold">Contact info</h3>
			if client.ContactInfo.PhoneNumbers != nil {
				for k,v := range client.ContactInfo.PhoneNumbers {
					<p><span class="font-bold">Phone Number:</span> { k } :: { v }</p>
				}
			}
			if client.ContactInfo.Emails != nil {
				for k,v := range client.ContactInfo.Emails {
					<p><span class="font-bold">Email:</span> { k } :: { v }</p>
				}
			}
			if client.ContactInfo.Links != nil {
				for k,v := range client.ContactInfo.Links {
					<p><span class="font-bold">Link:</span> { k } :: { v }</p>
				}
			}
			if client.ContactInfo.Locations != nil {
				for k,v := range client.ContactInfo.Locations {
					<p><span class="font-bold">Location:</span> { k } :: { v }</p>
				}
			}
		}
		<button
			class="px-5 py-2.5 my-2 text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm sm:w-auto text-center"
			hx-get={ fmt.Sprintf("/clients/%s/edit", client.ID) }
			hx-swap="outerHTML"
		>Edit</button>
	</div>
}

templ EditClient(cli *client.Client, formdata *ClientFormData) {
	@form("put", fmt.Sprintf("/clients/%s", cli.ID), templ.Attributes{"hx-target": "this"}) {
		<p>ID: { cli.ID }</p>
		@clientFormBody(cli, formdata)
		@editFormButtons(fmt.Sprintf("/clients/%s", cli.ID))
	}
}

templ ClientOOB(cli *client.Client) {
	<div id="clientsList" hx-swap-oob="beforeend">
		@Client(cli)
	</div>
}

templ clientFormBody(cli *client.Client, formdata *ClientFormData) {
	@input("Name", "text", "name", "e.g. John Doe", cli.ID, formdata.Name)
	@input("Phone Number", "text", "phone", "e.g. +201000000000", cli.ID, formdata.Phone)
	@input("Email", "email", "email", "e.g. johndoe@example.com", cli.ID, formdata.Email)
	@input("Link", "url", "link", "e.g. https://fb.com/username", cli.ID, formdata.Link)
	@input("Location", "text", "location", "Enter location to deliver to here...", cli.ID, formdata.Location)
	@textarea("Notes", "notes", "Enter notes here...", cli.ID, formdata.Notes)
	@checkbox("Wholesale by default", "wholesale_as_default", cli.ID, formdata.WholesaleAsDefault)
}
