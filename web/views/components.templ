package views

import "fmt"
import "strings"

type FormInputData struct {
	Value string `json:"value"`
	Error string `json:"error"`
}

type SelectOptions struct {
	Value string `json:"value"`
	View  string `json:"view"`
}

templ input(label, kind, name, placeholder, idSuffix string, data FormInputData) {
	<div>
		<label class="input-label" for={ join(name, idSuffix) }>{ label }</label>
		<input
			id={ join(name, idSuffix) }
			type={ kind }
			name={ name }
			placeholder={ placeholder }
			class="input-field"
			value={ data.Value }
		/>
		@errorMessage(data.Error)
	</div>
}

templ alpineInput(label, kind, nameKey, placeholder, idSuffixKey, dataKey string, classes ...string) {
	<div class={ strings.Join(classes, " ") }>
		<label class="input-label" :for={ alpineJoin(nameKey, idSuffixKey) }>{ label }</label>
		<input
			:id={ alpineJoin(nameKey, idSuffixKey) }
			type={ kind }
			:name={ nameKey }
			placeholder={ placeholder }
			class="input-field"
			x-model={ dataKey + ".value" }
		/>
		@alipneErrMessage(dataKey + ".error")
	</div>
}

templ moneyInput(label, name, idSuffix string, data FormInputData) {
	<div>
		<label class="input-label" for={ join(name, idSuffix) }>{ label }</label>
		<input
			id={ join(name, idSuffix) }
			name={ name }
			class="input-field"
			value={ data.Value }
			placeholder="E£ 1,000.00"
			x-mask:dynamic="'E£ ' + $money($input, '.', ',')"
		/>
		@errorMessage(data.Error)
	</div>
}

templ alpineMoneyInput(label, nameKey, idSuffixKey, dataKey string, classes ...string) {
	<div class={ strings.Join(classes, " ") }>
		<label class="input-label" :for={ alpineJoin(nameKey, idSuffixKey) }>{ label }</label>
		<input
			:id={ alpineJoin(nameKey, idSuffixKey) }
			:name={ nameKey }
			class="input-field"
			x-model={ dataKey + ".value" }
			placeholder="E£ 1,000.00"
			x-mask:dynamic="'E£ ' + $money($input, '.', ',')"
		/>
		@alipneErrMessage(dataKey + ".error")
	</div>
}

templ textarea(label, name, placeholder, idSuffix string, data FormInputData) {
	<div>
		<label class="input-label" for={ join(name, idSuffix) }>{ label }</label>
		<textarea
			id={ join(name, idSuffix) }
			name={ name }
			placeholder={ placeholder }
			class="input-field"
		>{ data.Value }</textarea>
		@errorMessage(data.Error)
	</div>
}

templ alpineTextarea(label, nameKey, placeholder, idSuffixKey, dataKey string) {
	<div>
		<label class="input-label" :for={ alpineJoin(nameKey, idSuffixKey) }>{ label }</label>
		<textarea
			:id={ alpineJoin(nameKey, idSuffixKey) }
			:name={ nameKey }
			placeholder={ placeholder }
			class="input-field"
			x-model={ dataKey + ".value" }
		></textarea>
		@alipneErrMessage(dataKey + ".error")
	</div>
}

templ checkbox(label, name, idSuffix string, data FormInputData) {
	<div>
		if data.Value == "on" {
			<input id={ join(name, idSuffix) } type="checkbox" name={ name } checked/>
		} else {
			<input id={ join(name, idSuffix) } type="checkbox" name={ name }/>
		}
		<label for={ join(name, idSuffix) } class="cursor-pointer">{ label }</label>
	</div>
}

templ alpineCheckbox(label, nameKey, idSuffix, dataKey string) {
	<div>
		<input
			:id={ alpineJoin(nameKey, idSuffix) }
			:name={ nameKey }
			type="checkbox"
			x-model={ dataKey + ".value" }
		/>
		<label :for={ alpineJoin(nameKey, idSuffix) } class="cursor-pointer">{ label }</label>
	</div>
}

templ selectInput(label, name, placeholder, idSuffix string, options map[string]string, data FormInputData, classes ...string) {
	<div class={ strings.Join(classes, " ") }>
		<label for={ join(name, idSuffix) } class="input-label">{ label }</label>
		<select
			id={ join(name, idSuffix) }
			name={ name }
			class="input-field"
		>
			<option value="" disabled selected>{ placeholder }</option>
			for k, v := range options {
				if k == data.Value {
					<option value={ k } selected>{ v }</option>
				} else {
					<option value={ k }>{ v }</option>
				}
			}
		</select>
		@errorMessage(data.Error)
	</div>
}

templ alpineSelect(label, nameKey, placeholder, idSuffixKey, optionsKey, dataKey string, classes ...string) {
	<div class={ strings.Join(classes, " ") }>
		<label class="input-label" :for={ alpineJoin(nameKey, idSuffixKey) }>{ label }</label>
		<select
			:id={ alpineJoin(nameKey, idSuffixKey) }
			:name={ nameKey }
			class="input-field"
			x-model={ dataKey + ".value" }
		>
			<option value="" disabled selected>{ placeholder }</option>
			<template x-for={ fmt.Sprintf("el in %s", optionsKey) }>
				<option :value="el.value" x-text="el.view"></option>
			</template>
		</select>
		@alipneErrMessage(dataKey + ".error")
	</div>
}

templ dateInput(label, name, idSuffix string, data FormInputData) {
	<div>
		<label class="input-label" for={ join(name, idSuffix) }>{ label }</label>
		<input
			data-datepicker
			id={ join(name, idSuffix) }
			class="input-field"
			x-mask="9999-99-99"
			placeholder="yyyy-mm-dd"
			name={ name }
			value={ data.Value }
		/>
		@errorMessage(data.Error)
	</div>
}

templ errorMessage(message string) {
	if message != "" {
		<div class="form-error-message">
			@errIcon("18px")
			<span>{ message }</span>
		</div>
	}
}

templ alipneErrMessage(msgKey string) {
	<div class="form-error-message" x-show={ fmt.Sprintf(`%s && %s !== ''`, msgKey, msgKey) }>
		@errIcon("18px")
		<span x-text={ msgKey }></span>
	</div>
}

templ creationForm(title, postTo, submitStr string, close ...bool) {
	<div
		x-data={ fmt.Sprintf("{open: %v, toggle() {this.open = !this.open}}", close == nil || !close[0]) }
		class="px-6 py-3 mb-6 bg-gray-100 rounded-lg"
		hx-target="this"
	>
		<div
			class="flex flex-column justify-between items-center"
			@click="toggle"
		>
			<h2 class="text-xl font-bold">{ title }</h2>
			<button
				x-show="!open"
				class="form-visibility-button bg-gray-300"
				aria-label="expand form"
				type="button"
			>
				@downIcon("20px")
			</button>
			<button
				x-show="open"
				class="form-visibility-button bg-red-500 text-white"
				aria-label="collapse form"
				type="button"
			>
				@closeIcon("15px")
			</button>
		</div>
		@form("post", postTo, templ.Attributes{"x-show": "open", "x-collapse.duration.1000ms": true}) {
			{ children... }
			<button
				type="submit"
				class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-lg w-full sm:w-auto px-5 py-2.5 text-center"
			>
				{ submitStr }
			</button>
		}
	</div>
}

templ form(action, path string, attrs ...templ.Attributes) {
	<form
		class="grid gap-2"
		{ templ.Attributes{fmt.Sprintf("hx-%s", action): string(templ.SafeURL(path))}... }
		hx-swap="outerHTML"
		if attrs != nil {
			{ attrs[0]... }
		}
	>
		{ children... }
	</form>
}

templ editFormButtons(entryGetUrl string) {
	<div class="flex gap-2 mt-2">
		<button
			type="submit"
			class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center grow"
		>
			Update
		</button>
		<button
			type="button"
			class="text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-4 focus:ring-red-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center w-1/6"
			hx-get={ string(templ.SafeURL(entryGetUrl)) }
			hx-trigger="click, keyup[key === 'Escape'] from:body"
		>Cancel</button>
	</div>
}

templ container() {
	<div class="md:max-w-screen-md px-5 mx-auto max-w-full">
		{ children... }
	</div>
}

templ link(href templ.SafeURL, text string) {
	<a href={ href } class="text font-bold text-blue-500 rounded-sm focus:ring focus:ring-blue-300 focus:outline-none">
		{ text }
	</a>
}

// TODO(research): update the hx values to SafeURL?
templ navlink(href templ.SafeURL) {
	<a href={ href } class="text-sm font-bold text-blue-500 rounded-sm focus:ring focus:ring-blue-300 focus:outline-none">{ string(href) }</a>
}

func alpineJoin(prefixKey, suffixKey string) string {
	pre := strings.ReplaceAll(prefixKey, "`", "")
	suf := strings.ReplaceAll(suffixKey, "`", "")
	return fmt.Sprintf("`%s-${%s}`", pre, suf)
}
