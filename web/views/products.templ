package views

import (
	"fmt"
	"time"
	"strconv"

	"github.com/omareloui/odinls/internal/adapters/jwt"
	"github.com/omareloui/odinls/internal/application/core/product"
	"math"
)

type ProductFormData struct {
	Name        FormInputData
	Description FormInputData
	Category    FormInputData
	Variants    []ProductVariantFormData
}

type ProductVariantFormData struct {
	ID             FormInputData `json:"id"`
	Suffix         FormInputData `json:"suffix"`
	Name           FormInputData `json:"name"`
	Description    FormInputData `json:"description"`
	Price          FormInputData `json:"price"`
	WholesalePrice FormInputData `json:"wholesale_price"`
	TimeToCraft    FormInputData `json:"time_to_craft"`
	MaterialsCost  FormInputData `json:"materials_cost"`
}

templ ProductsPage(claims *jwtadapter.JwtAccessClaims, prods []product.Product) {
	@baseLayout(claims, "Products | Odin LS") {
		@container() {
			@CreateProductForm(&product.Product{}, &ProductFormData{Variants: []ProductVariantFormData{{}}}, claims.HourlyRate(), true)
			<h2 class="text-3xl font-bold mb-3">Products</h2>
			@ProductsList(prods, claims.HourlyRate())
		}
	}
}

templ CreateProductForm(prod *product.Product, formdata *ProductFormData, hourlyRate float64, close ...bool) {
	@creationForm("Create Product", "/products", "Create Product", close...) {
		@productFormBody(prod, formdata, hourlyRate)
	}
}

templ EditProduct(prod *product.Product, formdata *ProductFormData, hourlyRate float64) {
	@form("put", fmt.Sprintf("/products/%s", prod.ID), templ.Attributes{"hx-target": "this"}) {
		<p>ID: { prod.ID }</p>
		@productFormBody(prod, formdata, hourlyRate)
		@editFormButtons(fmt.Sprintf("/products/%s", prod.ID))
	}
}

templ productFormBody(prod *product.Product, formdata *ProductFormData, hourlyRate float64) {
	@input("Name", "text", "name", "e.g. Minimalist Wallet", prod.ID, formdata.Name)
	@textarea("Description", "description", "Write a description for this product...", prod.ID, formdata.Description)
	@selectInput("Category", "category", "Select a category", prod.ID, *getProductCategoriesMap(), formdata.Category)
	<div
		x-data={ fmt.Sprintf(`{
				hourlyRate: %f,
				variants: %s.map((v) => {v.rand = randnum(1000000000, 9999999999); return v}),
				addNew() {const obj = %s; obj.rand = randnum(1000000000, 9999999999); this.variants.push(obj)},
				rm(idx) {this.variants.splice(idx,1)},
				calcEstPrice(variant, profitPercentage) {return Math.floor((((variant.time_to_craft.value / 60 * this.hourlyRate) + (variant.materials_cost.value * 1.05)) * (1 + profitPercentage)) / 5) * 5},
				get hideRemoveBtn() {return this.variants.length < 2}
			}`,
			hourlyRate,
			toJSON(formdata.Variants),
			toJSON(ProductVariantFormData{})) }
		class="grid gap-2"
	>
		<template x-for="(variant, idx) in variants">
			@productVariantFormBody()
		</template>
		<button
			type="button"
			class="px-5 py-2.5 mt-4 mb-6 text-white bg-blue-400 hover:bg-blue-500 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text text-center place-self-center w-fit"
			@click="addNew"
		>Add New Variant</button>
	</div>
}

templ productVariantFormBody() {
	<div class="grid gap-2">
		<h2 class="text-lg my-2">Variant #<span class="font-bold" x-text="idx + 1"></span></h2>
		<input type="hidden" :name="`variant_id-${idx}`" :value="variant.id.value"/>
		@alpineInput("Name", "text", "`variant_name-${idx}`", "e.g. Black", "variant.rand", "variant.name")
		@alpineInput("Suffix", "text", "`variant_suffix-${idx}`", "e.g. blk", "variant.rand", "variant.suffix")
		@alpineTextarea("Description", "`variant_description-${idx}`", "Write a description of this variant...", "variant.rand", "variant.description")
		@alpineInput("Materials Cost", "number", "`variant_materials_cost-${idx}`", "e.g. 60EGP", "variant.rand", "variant.materials_cost")
		@alpineInput("Time to Craft (in minutes)", "number", "`variant_time_to_craft-${idx}`", "e.g. 120", "variant.rand", "variant.time_to_craft")
		<div class="text-sm font-light flex gap-2 justify-evenly">
			<p>Est. price: <span x-text="calcEstPrice(variant, 1)"></span></p>
			<p>Est. wholesale price: <span x-text="calcEstPrice(variant, 0.4)"></span></p>
		</div>
		@alpineInput("Commercial Price", "number", "`variant_price-${idx}`", "e.g. 200EGP", "variant.rand", "variant.price")
		@alpineInput("Wholesale Price", "number", "`variant_wholesale_price-${idx}`", "e.g. 180EGP", "variant.rand", "variant.wholesale_price")
		<button
			type="button"
			@click="rm(idx)"
			x-show="!variant.id.value && !hideRemoveBtn"
			class="px-5 py-2.5 text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm w-full text-center"
		>Remove Variant</button>
	</div>
}

templ ProductsList(prods []product.Product, hourlyRate float64) {
	<div id="productsList" class="grid no-entries">
		for i, prod := range prods {
			if i > 0 {
				<br/>
			}
			@Product(&prod, hourlyRate)
		}
	</div>
}

templ Product(prod *product.Product, hourlyRate float64) {
	<div hx-target="this">
		<p>ID: { prod.ID }</p>
		<p>MerchantID: { prod.MerchantID }</p>
		<p>CraftsmanID: { prod.CraftsmanID }</p>
		<p>Name: { prod.Name }</p>
		<p>Description: { prod.Description }</p>
		<p>Ref: { prod.Ref() }</p>
		<p>Created At: { prod.CreatedAt.Format(time.RFC1123) }</p>
		<p>Updated At: { prod.UpdatedAt.Format(time.RFC1123) }</p>
		<h3 class="text-lg font-bold">Variants ({ strconv.Itoa(len(prod.Variants)) })</h3>
		for _, variant := range prod.Variants {
			<h4 class="text font-bold">{ variant.Name }</h4>
			<p>ID: { variant.ID }</p>
			<p>Description: { variant.Description }</p>
			<p>Materials Cost: { strconv.FormatFloat(variant.MaterialsCost, 'f', 2, 64) }</p>
			<p>Time to Craft: { strconv.Itoa(int(variant.TimeToCraft.Hours())) }h { strconv.FormatFloat(variant.TimeToCraft.Minutes() - math.Floor(variant.TimeToCraft.Hours()) * 60, 'f', 0, 64) }m</p>
			<p>Est. Commercial Price: { strconv.FormatFloat(variant.EstPrice(hourlyRate), 'f', 2, 64) }</p>
			<p>Est. Wholesale Price: { strconv.FormatFloat(variant.EstWholesalePrice(hourlyRate), 'f', 2, 64) }</p>
			<p>Commercial Price: { strconv.FormatFloat(variant.Price, 'f', 2, 64) }</p>
			<p>Wholesale Price: { strconv.FormatFloat(variant.WholesalePrice, 'f', 2, 64) }</p>
			<p>Ref: { variant.Ref() }</p>
		}
		<button
			class="px-5 py-2.5 my-2 text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm sm:w-auto text-center"
			hx-get={ fmt.Sprintf("/products/%s/edit", prod.ID) }
			hx-swap="outerHTML"
		>Edit</button>
	</div>
}

templ ProductOOB(prod *product.Product, hourlyRate float64) {
	<div id="productsList" hx-swap-oob="beforeend">
		@Product(prod, hourlyRate)
	</div>
}

func getProductCategoriesMap() *map[string]string {
	m := make(map[string]string)
	for _, cat := range product.CategoriesEnums() {
		m[cat.Code()] = cat.String()
	}
	return &m
}
