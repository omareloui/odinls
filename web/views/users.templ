package views

import (
	"fmt"
	"time"

	"github.com/omareloui/odinls/internal/adapters/jwt"
	"github.com/omareloui/odinls/internal/application/core/user"
	"github.com/omareloui/odinls/internal/application/core/role"
)

type NameFormData struct {
	First FormInputData
	Last  FormInputData
}

type CreateUserFormData struct {
	Name     NameFormData
	Email    FormInputData
	Username FormInputData
	Role     FormInputData
}

templ UserPage(accessClaims *jwtadapter.JwtAccessClaims, users []user.User) {
	@baseLayout(accessClaims, "Users | Odin LS") {
		@container() {
			<h2 class="text-3xl font-bold mb-3">Users</h2>
			@UsersList(users)
		}
	}
}

templ UsersList(users []user.User) {
	<div id="usersList" class="grid no-entries">
		for i, m := range users {
			if i > 0 {
				<br/>
			}
			@User(&m)
		}
	</div>
}

templ User(user *user.User) {
	<div hx-target="this">
		<p>ID: { user.ID }</p>
		<p>Name: { user.Name.First } { user.Name.Last }</p>
		<p>Username: { user.Username }</p>
		<p>Email: { user.Email }</p>
		if user.Role != nil {
			<p>Role: { user.Role.Name }</p>
		} else {
			<p>RoleID: { user.RoleID }</p>
		}
		<p>Created At: { user.CreatedAt.Format(time.RFC1123) }</p>
		<p>Updated At: { user.UpdatedAt.Format(time.RFC1123) }</p>
		<button
			class="px-5 py-2.5 my-2 text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm sm:w-auto text-center"
			hx-get={ fmt.Sprintf("/users/%s/edit", user.ID) }
			hx-swap="outerHTML"
		>Edit</button>
	</div>
}

templ EditUser(user *user.User, roles []role.Role, data *CreateUserFormData) {
	<form hx-patch={ fmt.Sprintf("/users/%s", user.ID) } hx-swap="outerHTML" hx-target="this">
		<p>ID: { user.ID }</p>
		<div class="grid grid-cols-2 gap-2">
			@input("First Name", "text", "first_name", "e.g. Omar", data.Name.First)
			@input("Last Name", "text", "last_name", "e.g. Eloui", data.Name.Last)
		</div>
		@input("Username", "text", "username", "e.g. omareloui", data.Username)
		@input("Email", "email", "email", "e.g. contact@omareloui.com", data.Email)
		<label for="role" class="mb-1 block text-sm font-medium text-gray-900">Role</label>
		<select
			id="role"
			name="role"
			class="bg-gray-50 border-2 border-gray-300 text-gray-900 text-sm rounded-lg focus:border-blue-300 block w-full p-2.5 focus:outline-none"
			required
		>
			<option value="" disabled selected>Select a role</option>
			for _, r := range roles {
				if r.ID == user.RoleID {
					<option value={ r.ID } selected>{ r.Name }</option>
				} else {
					<option value={ r.ID }>{ r.Name }</option>
				}
			}
		</select>
		<div class="flex gap-2 mt-2 ">
			<button
				type="submit"
				class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"
			>
				Update
			</button>
			<button
				type="button"
				class="text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-4 focus:ring-red-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center"
				hx-get={ fmt.Sprintf("/users/%s", user.ID) }
			>Cancel</button>
		</div>
	</form>
}

templ UserOOB(user *user.User) {
	<div id="usersList" hx-swap-oob="beforeend">
		@User(user)
	</div>
}
