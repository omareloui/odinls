package views

import (
	"fmt"
	"time"
	"strconv"

	"github.com/omareloui/odinls/internal/adapters/jwt"
	"github.com/omareloui/odinls/internal/application/core/user"
	"github.com/omareloui/odinls/internal/application/core/role"
	"github.com/omareloui/odinls/internal/application/core/merchant"
)

type NameFormData struct {
	First FormInputData
	Last  FormInputData
}

type UserFormData struct {
	Name       NameFormData
	Email      FormInputData
	Username   FormInputData
	Role       FormInputData
	HourlyRate FormInputData
	MerchantID FormInputData
}

type EditUserOpts struct {
	WithCraftsmanInfo bool
	Merchants         []merchant.Merchant
}

templ UserPage(accessClaims *jwtadapter.JwtAccessClaims, users []user.User) {
	@baseLayout(accessClaims, "Users | Odin LS") {
		@container() {
			<h2 class="text-3xl font-bold mb-3">Users</h2>
			@UsersList(users)
		}
	}
}

templ UsersList(users []user.User) {
	<div id="usersList" class="grid no-entries">
		for i, m := range users {
			if i > 0 {
				<br/>
			}
			@User(&m)
		}
	</div>
}

templ User(user *user.User) {
	<div hx-target="this" class="entry-container">
		<p>ID: { user.ID }</p>
		<p>Name: { user.Name.First } { user.Name.Last }</p>
		<p>Username: { user.Username }</p>
		<p>Email: { user.Email }</p>
		if user.Role != nil {
			<p>Role: { user.Role.Name }</p>
		} else {
			<p>RoleID: { user.RoleID }</p>
		}
		if user.Craftsman != nil {
			<p>Hourly Rate: { strconv.FormatFloat(user.Craftsman.HourlyRate, 'f', -1, 64) }EGP</p>
			if user.Craftsman.Merchant != nil {
				<p>Merchant: { user.Craftsman.Merchant.Name }</p>
			} else {
				<p>MerchantID: { user.Craftsman.MerchantID }</p>
			}
		}
		<p>Created At: { user.CreatedAt.Format(time.RFC1123) }</p>
		<p>Updated At: { user.UpdatedAt.Format(time.RFC1123) }</p>
		<div>
			if user.IsCraftsman() {
				<button
					class="px-5 py-2.5 my-2 mr-3 text-white bg-pink-500 hover:bg-pink-600 focus:outline-none focus:ring-4 focus:ring-pink-300 font-medium rounded-lg text-sm sm:w-auto text-center"
					hx-patch={ fmt.Sprintf("/users/%s/unset-craftsman", user.ID) }
					hx-confirm="Are you sure you want to unset this user as craftsman?"
					hx-swap="outerHTML"
				>Unset Craftsman</button>
			}
			<button
				class="px-5 py-2.5 my-2 text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm sm:w-auto text-center"
				hx-get={ fmt.Sprintf("/users/%s/edit", user.ID) }
				hx-swap="outerHTML"
			>Edit</button>
		</div>
	</div>
}

templ EditUser(user *user.User, roles []role.Role, data *UserFormData, opts ...*EditUserOpts) {
	@form("put", fmt.Sprintf("/users/%s", user.ID), templ.Attributes{"hx-target": "this"}) {
		<p>ID: { user.ID }</p>
		<div class="grid grid-cols-2 gap-2">
			@input("First Name", "text", "first_name", "e.g. Omar", "", data.Name.First)
			@input("Last Name", "text", "last_name", "e.g. Eloui", "", data.Name.Last)
		</div>
		@input("Username", "text", "username", "e.g. omareloui", "", data.Username)
		@input("Email", "email", "email", "e.g. contact@omareloui.com", "", data.Email)
		@selectInput("Role", "role", "Select a role", "", getRolesMap(roles), data.Role)
		if opts != nil && opts[0] != nil && opts[0].WithCraftsmanInfo {
			@CraftsmanForm(opts[0].Merchants, data)
		} else {
			<button
				type="button"
				class="px-5 py-2.5 mt-4 mb-6 text-white bg-blue-400 hover:bg-blue-500 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text text-center place-self-center w-fit"
				hx-get="/users/craftsman-form"
				hx-target="this"
				hx-swap="outerHTML"
			>Make Craftsman</button>
		}
		@editFormButtons(fmt.Sprintf("/users/%s", user.ID))
	}
}

templ UserOOB(user *user.User) {
	<div id="usersList" hx-swap-oob="beforeend">
		@User(user)
	</div>
}

templ CraftsmanForm(merchants []merchant.Merchant, data *UserFormData) {
	@input("Hourly Rate", "number", "hourly_rate", "e.g. 45", "", data.HourlyRate)
	@selectInput("Merchant", "merchant", "Select the craftsman merchant", "", getMerchantsMap(merchants), data.MerchantID)
}

func getRolesMap(roles []role.Role) map[string]string {
	m := make(map[string]string)
	for _, r := range roles {
		m[r.ID] = r.Name
	}
	return m
}

func getMerchantsMap(merchants []merchant.Merchant) map[string]string {
	ma := make(map[string]string)
	for _, m := range merchants {
		ma[m.ID] = m.Name
	}
	return ma
}
